%YAML 1.1
---
# Snapcraft Recipe for GnuPG
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: gnupg
summary: A complete and free implementation of the OpenPGP standard
description: |
  GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications.

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/gnupg-logo.waifu2x.1.6x.adapted.svg

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
version: determined-by-version-script

# (OPTIONAL) The version string can also be dynamically determined via scripting
# , in this case the value of the `version` key will be ignored (but the key is
# still required).
# NOTE: The resulting version string cannot be longer than 32 characters
version-script: ./snap/local/build-utilities/set-snap-version.bash
#version-script: git -C parts/gnupg/src describe --always --dirty --tags

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: devmode

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: devel

# Snap Base
# The base snap this snap is based on
base: core18

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # For snaps with a graphical user interface:
  #desktop:
  #desktop-legacy:
  #x11:
  #unity7:
  #wayland:

  # Storage access
  #home:
  #removable-media: # Non-A/C

  # Network access
  network:

#slots:

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Utility programs to help with package building
  build-utilities:
    source: snap/local/build-utilities
    plugin: dump
    organize:
      '*': assets/build-utilities/
    prime:
    - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Program patches to solve issues that can't be solved by tweaking in runtime
  patches:
    source: snap/local/patches
    plugin: dump
    organize:
      '*': assets/patches/
    prime:
    - -*

  # Helper programs that can be called at snap runtime
  helpers:
    source: snap/local/helpers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Remote part for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  #locales-launch:

  gnupg:
    source: http://www.ring.gr.jp/pub/net/gnupg/gnupg/gnupg-2.2.13.tar.bz2
    source-checksum: sha256/76c787a955f9e6e0ead47c9be700bfb9d454f955a7b7c7e697aa719bac7b11d8
    #source: https://www.gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.13.tar.bz2

    #source: git://git.gnupg.org/gnupg.git
    #source-tag: gnupg-2.2.13
    #source-depth: 1

    plugin: autotools
    configflags:
    - --enable-g13

    build-packages:
    - libassuan-dev
    - libgcrypt20-dev

    # TLS access to keyservers
    - libgnutls28-dev

    - libgpg-error-dev
    - libksba-dev

    # LDAP support
    - libldap2-dev

    - libnpth0-dev

    # Readline support
    - libreadline-dev

    # TOFU support
    - libsqlite3-dev

    # Integrated CCID smartcard reader driver support
    - libusb-1.0-0-dev

    - pkg-config
    stage-packages:
    - libassuan0
    - libgcrypt20
    - libgnutls30
    - libgpg-error0
    - libksba8
    - libldap-2.4-2
    - libnpth0
    - libreadline7
    - libsqlite3-0
    - libusb-1.0-0

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
#$ ls parts/gnupg/install/bin/
#dirmngr         gpg                gpg-wks-server  gpgscm  gpgv
#dirmngr-client  gpg-agent          gpgconf         gpgsm   kbxutil
#g13             gpg-connect-agent  gpgparsemail    gpgtar  watchgnupg
apps:
  gpg:
    # The command to run the application, the base command should be an *relative path* to an executable file rooted from the `prime` directory (for `classic` confinement compatiblity, where command search PATHs under $SNAP isn't set for library compatiblity reasons).  The arguments are usually other launchers' *absolute path* rooted from the $SNAP environment variable that are *stacked over* previous ones to consolidate their runtime environment modifications.
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: >
      bin/gnupg-launch
      gpg
